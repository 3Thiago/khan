// Code generated by go-bindata.
// sources:
// migrations/20160608133902_CreateGameTable.sql
// migrations/20160608150958_CreatePlayerTable.sql
// migrations/20160608174439_CreateClanTable.sql
// migrations/20160608182307_CreateMembershipTable.sql
// migrations/20160621161411_CreateHooksTable.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20160608133902_creategametableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x4d\x6f\xda\x40\x10\xbd\xfb\x57\xcc\x0d\x50\x0b\xa6\xa9\x94\x03\xa9\xaa\x12\x70\x2a\x5a\xc7\x24\x60\x1f\x72\xb2\x96\xf5\x60\xaf\x62\xef\xae\x76\xc7\x90\xaa\xea\x0f\xea\xdf\xe8\x2f\xeb\xda\x7c\x14\x21\x55\x41\xad\x2f\xd6\xcc\x7b\x6f\xfc\x66\xd7\xaf\xdf\x87\xe7\x82\x49\xcf\xbd\x0b\x22\x6d\x47\xbe\x9f\x0b\x2a\xea\xd5\x80\xab\xca\x27\xa5\xd7\x06\x31\x67\x15\x5a\x7f\xcf\x6b\xa8\xa1\xe0\x28\x2d\x66\x50\xcb\x0c\x0d\x50\x81\x70\x3f\x8b\xa1\xdc\xb5\x47\x87\x69\x6e\xd8\x76\xbb\x1d\x28\xed\xba\xaa\x36\x1c\x07\xca\xe4\xfe\x9e\x65\xfd\x4a\x50\x7f\x5f\x34\x8a\x89\xd2\xdf\x8c\xc8\x0b\x82\x5f\x3f\xe1\x6a\xf8\xee\x1a\x62\xa5\xe1\xce\x7d\x1f\x3e\x37\x06\xe0\xc3\x8a\xf1\x67\x94\xd9\x27\x5a\xe7\x5c\x35\x06\x3f\x7a\x8d\xf0\x4d\xae\x94\x45\x48\x74\x53\x2c\x1f\x43\x10\x12\x2c\x72\x12\x4a\x42\x27\xd1\x1d\x10\x16\xf0\x05\x79\x4d\xce\xf1\xb6\x40\xe9\x0c\xbb\x56\x25\x72\xc3\x5a\x92\x2b\x98\xd6\xa5\xc0\xcc\x9b\x2c\x82\x71\x1c\x40\x3c\xbe\x0d\x03\x68\xf7\x86\xae\x07\xee\x11\x99\x9b\x69\x04\x2b\xe1\x61\x31\xbb\x1f\x2f\x9e\xe0\x6b\xf0\xf4\xb6\x85\x74\xbd\x72\x6b\xa4\x8e\xb1\x61\x86\x17\xcc\x74\xdf\x5f\xf7\x20\x9a\xc7\x10\x25\x61\xb8\xe3\x48\x37\xea\x08\x5f\x0d\x87\xc3\x73\x42\x25\x64\x5a\x61\xb5\x42\x63\x0b\xa1\xd3\x12\x37\x58\xba\x45\x08\x73\x77\xc0\x67\x54\xf6\x72\x31\xd5\x4d\x6d\xf1\x94\x54\xca\x38\x47\x4d\x69\xbb\x2a\xdf\x6f\xfe\xba\x8a\x1b\x64\x84\xa9\x90\x1b\x41\x17\x8b\x0c\x56\x6a\x83\x7b\x97\xaf\x0a\xd4\x7a\x6d\x91\xfe\x47\xa7\x8d\xaa\x14\xfd\x83\x30\xc3\x0b\x74\x7f\xce\xfb\x6f\x8c\xb3\xdb\xb0\xf0\x65\x39\x8f\x6e\x8f\x2c\x98\x06\x77\xe3\x24\x8c\xa1\xf3\xfd\x47\x67\x34\x6a\xc1\x83\x92\x58\xc6\x88\x5d\x2c\xd8\x5d\x47\x96\x32\x82\x95\xc8\x9d\x9d\x33\x2b\xb5\xce\xce\xf1\x16\x6b\xc1\xc9\x3c\x5a\xc6\x8b\xf1\x2c\x8a\x4f\x7e\xda\x24\x9a\x3d\x26\x41\xf7\xd8\xe8\x79\xbd\x9b\xd3\x5c\x4d\xd5\x56\x1e\x92\x75\x8c\x55\xd3\xbc\x28\x58\x46\x95\xa5\x43\x9b\xe8\x7a\xd3\xc5\xfc\xe1\x34\x5a\x37\xde\xef\x00\x00\x00\xff\xff\x94\x82\x50\xc3\x7f\x04\x00\x00")

func migrations20160608133902_creategametableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608133902_creategametableSql,
		"migrations/20160608133902_CreateGameTable.sql",
	)
}

func migrations20160608133902_creategametableSql() (*asset, error) {
	bytes, err := migrations20160608133902_creategametableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608133902_CreateGameTable.sql", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1466687608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160608150958_createplayertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x72\xda\x30\x10\xbd\xfb\x2b\xf6\x06\x4c\x03\xa6\xe9\x24\x07\xd2\xe9\xd4\x01\xd1\xa1\x75\x4c\x62\xec\x43\x4e\x8c\x90\x37\xb6\x26\xb6\xa4\x91\xe5\xba\x99\x4e\x3f\xa8\xbf\xd1\x2f\xab\x64\x93\x98\x72\x2a\x17\x66\xf7\xbd\x7d\x7a\xbb\xcf\xd3\x29\x3c\x17\x54\x78\xf6\xbf\x30\x46\xd5\x0b\xdf\xcf\xb9\x29\x9a\xc3\x8c\xc9\xca\x37\x52\x3d\x69\xc4\x9c\x56\x58\xfb\x47\x9e\xa3\x86\x9c\xa1\xa8\x31\x83\x46\x64\xa8\xc1\x14\x08\x77\x9b\x04\xca\xbe\xbd\x78\x55\xb3\x62\x6d\xdb\xce\xa4\xb2\x5d\xd9\x68\x86\x33\xa9\x73\xff\xc8\xaa\xfd\x8a\x9b\xe9\xb1\x70\x13\x4b\xa9\x5e\x34\xcf\x0b\x03\x7f\x7e\xc3\xe5\xfc\xfd\x35\x24\x52\xc1\xda\xbe\x0f\x5f\x9c\x01\xf8\x78\xa0\xec\x19\x45\xf6\xd9\x3c\xe5\x4c\x3a\x83\x9f\x3c\x37\xf8\x2e\x97\xb2\x46\x48\x95\x2b\x76\x0f\x21\x70\x01\x35\x32\xc3\xa5\x80\x51\xaa\x46\xc0\x6b\xc0\x1f\xc8\x1a\x63\x1d\xb7\x05\x0a\x6b\xd8\xb6\x2a\x9e\x6b\xda\x91\x6c\x41\x95\x2a\x39\x66\xde\x32\x26\x41\x42\x20\x09\x6e\x43\x02\xaa\xa4\x2f\xa8\x6b\x18\x7b\x60\x7f\x3c\xb3\xaa\x9a\xd3\x12\xee\xe3\xcd\x5d\x10\x3f\xc2\x37\xf2\x78\xd1\x41\xaa\x39\xd8\x45\xf6\x96\xf1\x9d\x6a\x56\x50\x3d\xbe\xbc\xba\x9a\x40\xb4\x4d\x20\x4a\xc3\xb0\x27\xb9\x2b\x9e\x52\x3e\x5c\x0f\x0c\x88\xc9\x9a\xc4\x24\x5a\x92\x5d\xc7\xb3\x6f\xbe\x69\x4e\xfa\x71\x61\xdb\x83\xfc\x7c\x3e\x3f\xd7\xaf\xd0\xd0\x8c\x1a\x0a\x5f\x77\xdb\xe8\x76\x90\x5e\x91\x75\x90\x86\x09\x8c\x7e\xfe\x1a\x2d\x16\x1d\xd8\x0f\x30\x8d\xd4\x9e\x64\x4f\x0d\x1c\x78\xce\x85\x39\x13\x6c\x54\x76\x8e\x77\x58\x07\x2e\xb7\xd1\x2e\x89\x83\x4d\x94\x74\x86\x79\xb6\xef\xaf\x65\x17\x4c\xa3\xcd\x43\x4a\xc6\xc7\x7d\x2f\x86\xeb\x4c\xbc\xc9\xcd\x69\x62\x2b\xd9\x8a\xd7\xcc\xde\x02\x73\xcd\xff\x8a\x4c\xcb\xb2\xb4\xa8\xfb\x28\xbc\x55\xbc\xbd\xff\x37\xb4\x1b\xef\x6f\x00\x00\x00\xff\xff\xe0\xb8\x8d\xf4\xdb\x02\x00\x00")

func migrations20160608150958_createplayertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608150958_createplayertableSql,
		"migrations/20160608150958_CreatePlayerTable.sql",
	)
}

func migrations20160608150958_createplayertableSql() (*asset, error) {
	bytes, err := migrations20160608150958_createplayertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608150958_CreatePlayerTable.sql", size: 731, mode: os.FileMode(420), modTime: time.Unix(1466108784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160608174439_createclantableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x5d\x6f\xda\x30\x14\x7d\xcf\xaf\xb8\x6f\x80\x56\x08\xeb\xd4\x3e\xd0\x69\x1a\x85\x30\xb1\xa5\xa1\x0d\xc9\x43\x9f\x90\x71\x2e\x89\x57\x63\x5b\x8e\xb3\xac\x9a\xf6\x83\xf6\x37\xf6\xcb\x66\x27\x29\x20\xf6\xa1\xe5\x25\xf2\xbd\xe7\x1c\x5f\x9f\x7b\x86\x43\x78\x2a\x88\xf0\xec\xbf\x30\x46\x95\x13\xdf\xcf\x99\x29\xaa\xed\x88\xca\xbd\x6f\xa4\xda\x69\xc4\x9c\xec\xb1\xf4\x3b\x9c\x83\x86\x8c\xa2\x28\x31\x83\x4a\x64\xa8\xc1\x14\x08\x77\xcb\x04\x78\x5b\x9e\xbc\xa8\x59\xb1\xba\xae\x47\x52\xd9\xaa\xac\x34\xc5\x91\xd4\xb9\xdf\xa1\x4a\x7f\xcf\xcc\xb0\x3b\x38\xc6\x4c\xaa\x67\xcd\xf2\xc2\xc0\xcf\x1f\x70\x39\x7e\x7d\x0d\x89\x54\xb0\xb0\xf7\xc3\x07\x37\x00\xbc\xdd\x12\xfa\x84\x22\x7b\x6f\x76\x39\x95\x6e\xc0\x77\x9e\x23\xbe\xca\xa5\x2c\x11\x52\xe5\x0e\xeb\x87\x10\x98\x80\x12\xa9\x61\x52\x40\x2f\x55\x3d\x60\x25\xe0\x57\xa4\x95\xb1\x13\xd7\x05\x0a\x3b\xb0\x2d\xed\x59\xae\x49\x03\xb2\x07\xa2\x14\x67\x98\x79\xb3\x38\x98\x26\x01\x24\xd3\xdb\x30\x00\xca\x89\x28\xa1\xef\x81\xfd\x58\x66\x35\x35\x23\x1c\xee\xe3\xe5\xdd\x34\x7e\x84\x4f\xc1\xe3\x45\xd3\x52\xd5\xd6\x3e\x63\x63\x11\x5f\x88\xa6\x05\xd1\xfd\xcb\xab\xab\x01\x44\xab\x04\xa2\x34\x0c\x5b\x90\xf3\xf0\x14\xf2\xe6\xfa\x88\x80\x38\x58\x04\x71\x10\xcd\x82\x75\x83\xb3\x77\x1e\x34\x07\x2d\x5d\xd8\xf2\x51\x7e\x3c\x1e\x9f\xeb\xef\xd1\x90\x8c\x18\x02\x1f\xd7\xab\xe8\xf6\x28\x3d\x0f\x16\xd3\x34\x4c\xa0\xf7\xed\x7b\x6f\x32\x69\x9a\x2d\x81\x70\x2e\xeb\x4d\xf3\x6e\xda\xda\xb0\x95\x92\x23\x11\xbf\x73\x8d\xae\xb0\x23\x55\x46\x6e\x3e\x4b\xf6\x0f\xf0\x8e\xf0\xb2\x43\x53\x8d\xc4\x7a\xbe\x21\x06\xb6\x2c\x67\xc2\x9c\xcd\x5c\xa9\xec\xbc\x7f\xe8\x65\xc8\xf1\x6f\x3d\x59\x0b\xd4\xce\x4c\x5b\xc6\xdc\x06\xf0\x4f\x46\x2a\x4e\x9e\x51\x5b\x2b\x1b\x0f\x1b\xde\x6c\x15\xad\x93\x78\xba\x8c\x92\xc6\x66\x96\x6d\xdc\x86\xad\x4e\x1a\x2d\x1f\xd2\xa0\xdf\xed\xe8\xe2\xb8\xd1\x81\x37\xb8\x39\xcd\xd8\xdc\x5e\xfd\x92\xb2\x43\xc4\x5c\xf1\xbf\x42\xa6\x25\xe7\xb6\xeb\x62\xec\xcd\xe3\xd5\xfd\x69\xcc\x6e\xbc\x5f\x01\x00\x00\xff\xff\x88\x0f\xf0\x4d\x8b\x03\x00\x00")

func migrations20160608174439_createclantableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608174439_createclantableSql,
		"migrations/20160608174439_CreateClanTable.sql",
	)
}

func migrations20160608174439_createclantableSql() (*asset, error) {
	bytes, err := migrations20160608174439_createclantableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608174439_CreateClanTable.sql", size: 907, mode: os.FileMode(420), modTime: time.Unix(1466119659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160608182307_createmembershiptableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x4d\x6e\xdb\x3c\x10\x86\xf7\x3a\xc5\xec\x12\xe3\x4b\xac\xaf\x2d\x90\x45\x52\x14\x75\x6d\xb9\x30\xaa\xc8\x89\x2c\x2d\xb2\x32\x28\x69\x2c\x11\xa1\x48\x96\xa4\xec\xfa\x48\xbd\x46\x4f\xd6\xa1\x7f\x03\xbb\x40\x8d\x7a\x63\x90\xef\xfb\x0c\xe7\x4f\xb7\xb7\xf0\xda\x30\x19\xd0\x7f\xe3\x9c\xb6\xf7\x61\x58\x73\xd7\x74\x45\xbf\x54\x6d\xe8\x94\x5e\x18\xc4\x9a\xb5\x68\xc3\x9d\xcf\x5b\x63\x5e\xa2\xb4\x58\x41\x27\x2b\x34\xe0\x1a\x84\xc7\x49\x06\x62\x7b\x7d\xbf\x8f\x46\xc1\x56\xab\x55\x5f\x69\xba\x55\x9d\x29\xb1\xaf\x4c\x1d\xee\x5c\x36\x6c\xb9\xbb\xdd\x1d\x3c\x31\x54\x7a\x6d\x78\xdd\x38\xf8\xf5\x13\xde\xff\xff\xee\x0e\x32\xa5\x61\x4c\xef\xc3\x57\x9f\x00\x7c\x2c\x58\xf9\x8a\xb2\xfa\xec\x16\x75\xa9\x7c\x82\x9f\x02\x0f\xfe\x57\x2b\x65\x11\x72\xed\x0f\xb3\xe7\x18\xb8\x04\x8b\xa5\xe3\x4a\xc2\x55\xae\xaf\x80\x5b\xc0\x1f\x58\x76\x8e\x32\x5e\x35\x28\x29\x61\xba\x6a\x79\x6d\xd8\xc6\x44\x07\xa6\xb5\xe0\x58\x05\xc3\x34\x1a\x64\x11\x64\x83\x2f\x71\x04\x2d\xb6\x05\x1a\xdb\x70\x6d\xe1\x3a\x00\xfa\xf1\x8a\x22\x1b\xce\x04\x3c\xa5\x93\xc7\x41\xfa\x02\xdf\xa2\x97\x9b\x8d\xe4\x9b\x34\x27\x7d\xc9\x4c\xd9\x30\x73\xfd\xe1\xae\x07\xc9\x34\x83\x24\x8f\x63\x48\xa3\x71\x94\x46\xc9\x30\x9a\x6d\x7c\x14\x4e\x77\x05\xd5\x4e\x40\x6f\x8b\x97\x82\x49\x8f\x73\xe9\xb0\xa6\x9e\xfe\x09\xf5\x1e\x42\x0f\x8c\x16\x6c\x8d\xe6\x6f\xd4\xd6\xf5\x96\x3b\xd6\x35\x17\xb8\x44\x71\x86\x6f\x6d\xd4\x13\xa3\x96\xd4\xb3\x42\x29\x81\x4c\x1e\xa3\x8f\xa2\xf1\x20\x8f\x33\x58\x30\x61\x71\x6b\xae\x50\xf2\x0b\xad\x05\x93\xf2\x42\xab\xc1\xef\x1d\x5a\xa7\xfe\xa1\xc8\xd2\x20\xa3\x81\xcf\x99\x83\x82\xd7\xc4\x9e\x54\xd7\xe9\xea\x54\x3f\x68\x15\x0a\xf4\x5a\xb1\x3e\x3e\x7a\x26\x9e\x82\x1b\x71\x38\x4d\x66\x59\x3a\x98\x24\xd9\x2e\x25\x5e\xcd\xfd\xd8\x28\xfd\x3c\x99\x3c\xe7\xd1\xf5\x61\x68\x37\xfb\x99\xf7\x82\xde\xc3\xdb\x45\x1e\xa9\x95\xdc\xaf\xf2\x61\x8f\xfd\xe5\x45\x9b\x6c\x94\x10\xbe\xbb\xf4\xad\x04\xa3\x74\xfa\x74\xbe\xcb\x0f\xc1\xef\x00\x00\x00\xff\xff\x52\xd1\x21\x8f\xf6\x03\x00\x00")

func migrations20160608182307_createmembershiptableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608182307_createmembershiptableSql,
		"migrations/20160608182307_CreateMembershipTable.sql",
	)
}

func migrations20160608182307_createmembershiptableSql() (*asset, error) {
	bytes, err := migrations20160608182307_createmembershiptableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608182307_CreateMembershipTable.sql", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1466687330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160621161411_createhookstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\xf6\x16\x1b\x8d\xad\x3e\x80\x1c\x92\xa2\xa8\xeb\x30\x85\x51\x45\x4e\x64\xe9\x90\x93\x41\x53\x1b\x8a\xb0\x4c\x12\x24\x15\x25\x9f\xd4\xdf\xe8\x97\x75\x29\x3b\xa9\x6b\xf4\x50\x5d\x84\xdd\x99\x59\xce\xee\x4c\x26\xb0\x6d\xb8\x4e\xe8\xdf\x84\x60\xfd\x65\x9a\x4a\x15\x9a\x6e\x33\x15\x66\x97\x06\x63\x1f\x1d\xa2\xe4\x3b\xf4\xe9\x81\x17\xa9\x99\x12\xa8\x3d\xd6\xd0\xe9\x1a\x1d\x84\x06\xe1\x76\x51\x42\xbb\x6f\x5f\xbe\x4e\xa3\x61\x7d\xdf\x4f\x8d\xa5\xae\xe9\x9c\xc0\xa9\x71\x32\x3d\xb0\x7c\xba\x53\x61\x72\x28\xa2\x62\x6e\xec\x8b\x53\xb2\x09\xf0\xeb\x27\x7c\x7c\xff\xe1\x02\x4a\x63\xe1\x86\xde\x87\xef\xd1\x00\x7c\xde\x70\xb1\x45\x5d\x7f\x0d\x8f\x52\x98\x68\xf0\x4b\x12\x85\xef\xa4\x31\x1e\xa1\xb2\xb1\x58\xdd\x67\xa0\x34\x78\x14\x41\x19\x0d\x67\x95\x3d\x03\xe5\x01\x9f\x51\x74\x81\x1c\xf7\x0d\x6a\x32\x4c\xad\x9d\x92\x8e\x0f\x24\x2a\xb8\xb5\xad\xc2\x3a\x99\x17\x6c\x56\x32\x28\x67\xdf\x32\x06\x8d\x31\x5b\x0f\xa3\x04\xe8\x53\x35\xcd\x74\x8a\xb7\x70\x57\x2c\x6e\x67\xc5\x03\xfc\x60\x0f\xe7\x03\x14\xcf\xb3\x26\xfc\x89\x3b\xd1\x70\x37\xfa\x74\x31\x86\x7c\x59\x42\x5e\x65\x19\x14\xec\x86\x15\x2c\x9f\xb3\xd5\xc0\xa3\x71\xb6\xdb\xd0\xd6\x24\x18\xef\xe5\x6f\xf5\x3f\x07\xec\x39\xf8\x84\x3a\xac\xc3\x8b\x45\x5a\x2e\xa0\xa4\xa3\xff\x4d\xe8\x5c\x0b\x01\x9f\xc3\x49\x5b\x38\xe4\xb4\xf5\x9a\x07\xd8\x28\x49\xd2\x53\x99\xad\x4f\xf1\x01\x1b\xc0\xf9\x32\x5f\x95\xc5\x6c\x91\x97\xc3\x25\x54\xbd\xde\x5b\x25\xa7\x55\xbe\xb8\xaf\xd8\xe8\xb0\xf9\xf9\x9f\x1d\xc6\xc9\xf8\xea\x38\x94\x6b\xd3\xeb\xd7\x58\xde\x32\x89\xcd\xff\x4a\xc5\x99\xb6\x25\x34\xe6\x9e\x5c\x17\xcb\xbb\xe3\x5c\xae\x92\xdf\x01\x00\x00\xff\xff\xe0\xb0\xeb\xc6\xbc\x02\x00\x00")

func migrations20160621161411_createhookstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160621161411_createhookstableSql,
		"migrations/20160621161411_CreateHooksTable.sql",
	)
}

func migrations20160621161411_createhookstableSql() (*asset, error) {
	bytes, err := migrations20160621161411_createhookstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160621161411_CreateHooksTable.sql", size: 700, mode: os.FileMode(420), modTime: time.Unix(1466601889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20160608133902_CreateGameTable.sql": migrations20160608133902_creategametableSql,
	"migrations/20160608150958_CreatePlayerTable.sql": migrations20160608150958_createplayertableSql,
	"migrations/20160608174439_CreateClanTable.sql": migrations20160608174439_createclantableSql,
	"migrations/20160608182307_CreateMembershipTable.sql": migrations20160608182307_createmembershiptableSql,
	"migrations/20160621161411_CreateHooksTable.sql": migrations20160621161411_createhookstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20160608133902_CreateGameTable.sql": &bintree{migrations20160608133902_creategametableSql, map[string]*bintree{}},
		"20160608150958_CreatePlayerTable.sql": &bintree{migrations20160608150958_createplayertableSql, map[string]*bintree{}},
		"20160608174439_CreateClanTable.sql": &bintree{migrations20160608174439_createclantableSql, map[string]*bintree{}},
		"20160608182307_CreateMembershipTable.sql": &bintree{migrations20160608182307_createmembershiptableSql, map[string]*bintree{}},
		"20160621161411_CreateHooksTable.sql": &bintree{migrations20160621161411_createhookstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

