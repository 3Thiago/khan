// Code generated by go-bindata.
// sources:
// migrations/20160608133902_CreateGameTable.sql
// migrations/20160608150958_CreatePlayerTable.sql
// migrations/20160608174439_CreateClanTable.sql
// migrations/20160608182307_CreateMembershipTable.sql
// migrations/20160621161411_CreateHooksTable.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20160608133902_creategametableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x4d\x6f\xda\x40\x10\xbd\xfb\x57\xcc\x0d\x50\x0b\x6e\x53\x25\x07\x52\x55\x25\xe0\x54\xb4\x8e\x49\xc0\x3e\xe4\x64\x2d\xeb\xc1\x5e\xc5\xde\x5d\xed\x8e\x21\x55\xd5\x1f\xd4\xbf\xd1\x5f\xd6\xb5\xf9\x28\x42\xaa\x82\x1a\x5f\xac\x99\xf7\xde\xf8\xcd\xae\x5f\xbf\x0f\x4f\x05\x93\x9e\x7b\x17\x44\xda\x0e\x7d\x3f\x17\x54\xd4\xcb\x01\x57\x95\x4f\x4a\xaf\x0c\x62\xce\x2a\xb4\xfe\x8e\xd7\x50\x43\xc1\x51\x5a\xcc\xa0\x96\x19\x1a\xa0\x02\xe1\x6e\x1a\x43\xb9\x6d\x0f\xf7\xd3\xdc\xb0\xcd\x66\x33\x50\xda\x75\x55\x6d\x38\x0e\x94\xc9\xfd\x1d\xcb\xfa\x95\xa0\xfe\xae\x68\x14\x63\xa5\xbf\x1b\x91\x17\x04\xbf\x7f\xc1\xc5\xbb\xf7\x57\x10\x2b\x0d\xb7\xee\xfb\xf0\xa5\x31\x00\x1f\x97\x8c\x3f\xa1\xcc\x3e\xd3\x2a\xe7\xaa\x31\xf8\xc9\x6b\x84\x6f\x72\xa5\x2c\x42\xa2\x9b\x62\xf1\x10\x82\x90\x60\x91\x93\x50\x12\x3a\x89\xee\x80\xb0\x80\xcf\xc8\x6b\x72\x8e\x37\x05\x4a\x67\xd8\xb5\x2a\x91\x1b\xd6\x92\x5c\xc1\xb4\x2e\x05\x66\xde\x78\x1e\x8c\xe2\x00\xe2\xd1\x4d\x18\x40\xbb\x37\x74\x3d\x70\x8f\xc8\xdc\x4c\x23\x58\x09\xf7\xf3\xe9\xdd\x68\xfe\x08\xdf\x82\xc7\xb7\x2d\xa4\xeb\xa5\x5b\x23\x75\x8c\x35\x33\xbc\x60\xa6\xfb\xe1\xaa\x07\xd1\x2c\x86\x28\x09\xc3\x2d\x47\xba\x51\x07\xf8\xe2\xf2\xf2\x14\xaf\x84\x4c\x2b\xac\x96\x68\x6c\x21\x74\x5a\xe2\x1a\x4b\xb7\x07\x61\xee\xce\xf7\x84\xca\x9e\xcf\xa6\xba\xa9\x2d\x9e\x92\x4a\x19\xe7\xa8\x29\x6d\x37\xe5\xbb\xc5\x5f\x56\x71\x83\x8c\x30\x15\x72\x2d\xe8\x6c\x91\xc1\x4a\xad\x71\xe7\xf2\x45\x81\x5a\xad\x2c\xd2\x6b\x74\xda\xa8\x4a\xd1\x7f\x08\x33\x3c\x43\xf7\xf7\xbc\xff\xc5\x38\xb9\x0d\x0b\x5f\x17\xb3\xe8\xe6\xc0\x82\x49\x70\x3b\x4a\xc2\x18\x3a\x3f\x7e\x76\x86\xc3\x16\xdc\x2b\x89\x65\x8c\xd8\xd9\x82\xed\x75\x64\x29\x23\x58\x8a\xdc\xd9\x39\xb1\x52\xeb\xec\x14\x6f\xb1\x16\x1c\xcf\xa2\x45\x3c\x1f\x4d\xa3\xf8\xe8\x9f\x4d\xa2\xe9\x43\x12\x74\x0f\x8d\x9e\xd7\xbb\x3e\x8e\xd5\x44\x6d\xe4\x3e\x58\x87\x54\x35\xcd\xb3\x72\x65\x54\x59\x3a\xb4\x49\xae\x37\x99\xcf\xee\x8f\x93\x75\xed\xfd\x09\x00\x00\xff\xff\x84\x5e\x57\x60\x7e\x04\x00\x00")

func migrations20160608133902_creategametableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608133902_creategametableSql,
		"migrations/20160608133902_CreateGameTable.sql",
	)
}

func migrations20160608133902_creategametableSql() (*asset, error) {
	bytes, err := migrations20160608133902_creategametableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608133902_CreateGameTable.sql", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1466707272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160608150958_createplayertableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x6e\xd3\x40\x10\xbd\xfb\x2b\xe6\x96\x44\x34\x31\x14\xb5\x87\x14\x21\xdc\x64\x83\x02\xae\xd3\x3a\xf6\xa1\xa7\x68\x63\x4f\xed\x55\xed\xdd\xd5\x7a\x8d\xa9\x10\x1f\xc4\x6f\xf0\x65\xcc\xda\x69\x53\x72\x40\xe4\x12\xcd\xbc\x37\x6f\xdf\xcc\xf3\x74\x0a\x8f\x25\x97\x1e\xfd\x97\xd6\xea\x66\xee\xfb\x85\xb0\x65\xbb\x9f\x65\xaa\xf6\xad\xd2\x0f\x06\xb1\xe0\x35\x36\xfe\x81\xe7\xa8\xa1\xc8\x50\x36\x98\x43\x2b\x73\x34\x60\x4b\x84\x9b\x75\x02\xd5\xd0\x9e\x3f\xab\x91\x58\xd7\x75\x33\xa5\xa9\xab\x5a\x93\xe1\x4c\x99\xc2\x3f\xb0\x1a\xbf\x16\x76\x7a\x28\xdc\xc4\x42\xe9\x27\x23\x8a\xd2\xc2\xef\x5f\x70\xfe\xf6\xdd\x25\x24\x4a\xc3\x8a\xde\x87\xcf\xce\x00\x7c\xd8\xf3\xec\x11\x65\xfe\xc9\x3e\x14\x99\x72\x06\x3f\x7a\x6e\xf0\x4d\xa1\x54\x83\x90\x6a\x57\x6c\xef\x42\x10\x12\x1a\xcc\xac\x50\x12\x46\xa9\x1e\x81\x68\x00\xbf\x63\xd6\x5a\x72\xdc\x95\x28\xc9\x30\xb5\x6a\x51\x18\xde\x93\xa8\xe0\x5a\x57\x02\x73\x6f\x11\xb3\x20\x61\x90\x04\xd7\x21\x03\x5d\xf1\x27\x34\x0d\x8c\x3d\xa0\x9f\xc8\x49\xd5\x08\x5e\xc1\x6d\xbc\xbe\x09\xe2\x7b\xf8\xca\xee\xcf\x7a\x48\xb7\x7b\x5a\x64\x47\x8c\x6f\xdc\x64\x25\x37\xe3\xf3\x8b\x8b\x09\x44\x9b\x04\xa2\x34\x0c\x07\x92\xbb\xe2\x6b\xca\xfb\xcb\x23\x03\x62\xb6\x62\x31\x8b\x16\x6c\xdb\xf3\xe8\xcd\x17\xcd\xc9\x30\x2e\xa9\xfd\x2f\xf9\x1a\x2d\xcf\xb9\xe5\xf0\x65\xbb\x89\xae\x8f\xca\x4b\xb6\x0a\xd2\x30\x81\xd1\x8f\x9f\xa3\xf9\xbc\x07\x87\x81\xcc\x20\xa7\x8b\xec\xb8\x85\xbd\x28\x84\xb4\x27\x82\xad\xce\x4f\xf1\x1e\xeb\xc1\xc5\x26\xda\x26\x71\xb0\x8e\x92\xde\xaf\xc8\x77\xc3\xb1\x68\xbf\x34\x5a\xdf\xa5\x6c\x7c\x58\xf7\xec\x78\x9c\x89\x37\xb9\x7a\x1d\xd8\x52\x75\xf2\x39\xb2\x97\xbc\x5c\xf3\xbf\x12\x33\xaa\xaa\x08\x75\xdf\x84\xb7\x8c\x37\xb7\x7f\x67\x76\xe5\xfd\x09\x00\x00\xff\xff\xa6\xd1\x46\x2b\xda\x02\x00\x00")

func migrations20160608150958_createplayertableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608150958_createplayertableSql,
		"migrations/20160608150958_CreatePlayerTable.sql",
	)
}

func migrations20160608150958_createplayertableSql() (*asset, error) {
	bytes, err := migrations20160608150958_createplayertableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608150958_CreatePlayerTable.sql", size: 730, mode: os.FileMode(420), modTime: time.Unix(1466707272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160608174439_createclantableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x72\xd3\x30\x10\xbd\xfb\x2b\xf6\x96\x64\x68\x62\x28\xd3\x1e\x52\x86\x21\x4d\x1c\x26\xe0\x3a\xad\x63\x1f\x7a\xca\x28\xf6\xc6\x16\x55\x24\x8d\x2c\x63\x3a\x0c\x1f\xc4\x6f\xf0\x65\xac\x1c\x37\xc9\x14\xe8\xe0\x8b\x47\xbb\xef\x3d\xad\xde\xbe\xe1\x10\x1e\x4a\x26\x3d\xfa\x97\xd6\xea\x6a\xec\xfb\x05\xb7\x65\xbd\x19\x65\x6a\xe7\x5b\xa5\xb7\x06\xb1\x60\x3b\xac\xfc\x0e\xe7\xa0\x21\xcf\x50\x56\x98\x43\x2d\x73\x34\x60\x4b\x84\x9b\x45\x02\x62\x5f\x1e\x3f\xa9\x91\x58\xd3\x34\x23\xa5\xa9\xaa\x6a\x93\xe1\x48\x99\xc2\xef\x50\x95\xbf\xe3\x76\xd8\x1d\x1c\x63\xaa\xf4\xa3\xe1\x45\x69\xe1\xd7\x4f\x38\x7f\xfd\xe6\x12\x12\xa5\x61\x4e\xf7\xc3\x47\x37\x00\xbc\xdb\xb0\xec\x01\x65\xfe\xc1\x6e\x8b\x4c\xb9\x01\xdf\x7b\x8e\xf8\xaa\x50\xaa\x42\x48\xb5\x3b\xac\xee\x42\xe0\x12\x2a\xcc\x2c\x57\x12\x7a\xa9\xee\x01\xaf\x00\xbf\x61\x56\x5b\x9a\xb8\x29\x51\xd2\xc0\x54\xda\xf1\xc2\xb0\x16\x44\x07\xa6\xb5\xe0\x98\x7b\xd3\x38\x98\x24\x01\x24\x93\xeb\x30\x80\x4c\x30\x59\x41\xdf\x03\xfa\x78\x4e\x9a\x86\x33\x01\xb7\xf1\xe2\x66\x12\xdf\xc3\xe7\xe0\xfe\xac\x6d\xe9\x7a\x43\xcf\x58\x13\xe2\x2b\x33\x59\xc9\x4c\xff\xfc\xe2\x62\x00\xd1\x32\x81\x28\x0d\xc3\x3d\xc8\x79\x78\x0a\x79\x7b\x79\x44\x40\x1c\xcc\x83\x38\x88\xa6\xc1\xaa\xc5\xd1\x9d\x07\xcd\xc1\x9e\x2e\xa9\xfc\x92\xfc\x0e\x2d\xcb\x99\x65\xf0\x69\xb5\x8c\xae\x8f\xca\xb3\x60\x3e\x49\xc3\x04\x7a\xdf\x7f\xf4\xc6\xe3\xb6\xb9\x27\x30\x21\x54\xb3\x6e\x9f\x9d\xed\x5d\xd8\x28\x25\x90\xc9\x3f\xb9\xd6\xd4\xd8\x91\x6a\xab\xd6\x5f\x14\x7f\x01\xbc\x65\xa2\xea\xd0\x99\x41\x46\x96\xaf\x99\x85\x0d\x2f\xb8\xb4\xcf\x66\xae\x75\xfe\xbc\x7f\xe8\xe5\x28\xf0\x5f\x3d\xd5\x48\x34\xce\x4b\x2a\x63\x41\xf9\xfb\x9b\x8f\x5a\xb0\x47\x34\xe4\x64\x6b\x61\xcb\x9b\x2e\xa3\x55\x12\x4f\x16\x51\xd2\xba\xcc\xf3\xb5\x5b\x30\xe9\xa4\xd1\xe2\x2e\x0d\xfa\xdd\x8a\xce\x8e\x0b\x1d\x78\x83\xab\xd3\x88\xcd\xe8\xea\xa7\x90\x1d\x12\xe6\x8a\xff\x95\x31\xa3\x84\xa0\xae\x4b\xb1\x37\x8b\x97\xb7\xa7\x29\xbb\xf2\x7e\x07\x00\x00\xff\xff\xb8\x66\x58\xaf\x8a\x03\x00\x00")

func migrations20160608174439_createclantableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608174439_createclantableSql,
		"migrations/20160608174439_CreateClanTable.sql",
	)
}

func migrations20160608174439_createclantableSql() (*asset, error) {
	bytes, err := migrations20160608174439_createclantableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608174439_CreateClanTable.sql", size: 906, mode: os.FileMode(420), modTime: time.Unix(1466707272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160608182307_createmembershiptableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x4d\x6e\xdb\x3c\x10\x86\xf7\x3a\xc5\xec\x12\xe3\x4b\xac\xaf\x2d\x90\x45\x52\x14\x75\x6d\xb9\x30\xaa\xc8\x89\x2c\x2d\xb2\x32\x28\x69\x2c\x11\xa1\x48\x96\xa4\xec\xfa\x48\xbd\x46\x4f\xd6\xa1\x7f\x03\xbb\x40\x8d\x7a\x63\x90\xef\xfb\x0c\xe7\x4f\xb7\xb7\xf0\xda\x30\x19\xd0\x7f\xe3\x9c\xb6\xf7\x61\x58\x73\xd7\x74\x45\xbf\x54\x6d\xe8\x94\x5e\x18\xc4\x9a\xb5\x68\xc3\x9d\xcf\x5b\x63\x5e\xa2\xb4\x58\x41\x27\x2b\x34\xe0\x1a\x84\xc7\x49\x06\x62\x7b\x7d\xbf\x8f\x46\xc1\x56\xab\x55\x5f\x69\xba\x55\x9d\x29\xb1\xaf\x4c\x1d\xee\x5c\x36\x6c\xb9\xbb\xdd\x1d\x3c\x31\x54\x7a\x6d\x78\xdd\x38\xf8\xf5\x13\xde\xff\xff\xee\x0e\x32\xa5\x61\x4c\xef\xc3\x57\x9f\x00\x7c\x2c\x58\xf9\x8a\xb2\xfa\xec\x16\x75\xa9\x7c\x82\x9f\x02\x0f\xfe\x57\x2b\x65\x11\x72\xed\x0f\xb3\xe7\x18\xb8\x04\x8b\xa5\xe3\x4a\xc2\x55\xae\xaf\x80\x5b\xc0\x1f\x58\x76\x8e\x32\x5e\x35\x28\x29\x61\xba\x6a\x79\x6d\xd8\xc6\x44\x07\xa6\xb5\xe0\x58\x05\xc3\x34\x1a\x64\x11\x64\x83\x2f\x71\x04\x2d\xb6\x05\x1a\xdb\x70\x6d\xe1\x3a\x00\xfa\xf1\x8a\x22\x1b\xce\x04\x3c\xa5\x93\xc7\x41\xfa\x02\xdf\xa2\x97\x9b\x8d\xe4\x9b\x34\x27\x7d\xc9\x4c\xd9\x30\x73\xfd\xe1\xae\x07\xc9\x34\x83\x24\x8f\x63\x48\xa3\x71\x94\x46\xc9\x30\x9a\x6d\x7c\x14\x4e\x77\x05\xd5\x4e\x40\x6f\x8b\x97\x82\x49\x8f\x73\xe9\xb0\xa6\x9e\xfe\x09\xf5\x1e\x42\x0f\x8c\x16\x6c\x8d\xe6\x6f\xd4\xd6\xf5\x96\x3b\xd6\x35\x17\xb8\x44\x71\x86\x6f\x6d\xd4\x13\xa3\x96\xd4\xb3\x42\x29\x81\x4c\x1e\xa3\x8f\xa2\xf1\x20\x8f\x33\x58\x30\x61\x71\x6b\xae\x50\xf2\x0b\xad\x05\x93\xf2\x42\xab\xc1\xef\x1d\x5a\xa7\xfe\xa1\xc8\xd2\x20\xa3\x81\xcf\x99\x83\x82\xd7\xc4\x9e\x54\xd7\xe9\xea\x54\x3f\x68\x15\x0a\xf4\x5a\xb1\x3e\x3e\x7a\x26\x9e\x82\x1b\x71\x38\x4d\x66\x59\x3a\x98\x24\xd9\x2e\x25\x5e\xcd\xfd\xd8\x28\xfd\x3c\x99\x3c\xe7\xd1\xf5\x61\x68\x37\xfb\x99\xf7\x82\xde\xc3\xdb\x45\x1e\xa9\x95\xdc\xaf\xf2\x61\x8f\xfd\xe5\x45\x9b\x6c\x94\x10\xbe\xbb\xf4\xad\x04\xa3\x74\xfa\x74\xbe\xcb\x0f\xc1\xef\x00\x00\x00\xff\xff\x52\xd1\x21\x8f\xf6\x03\x00\x00")

func migrations20160608182307_createmembershiptableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160608182307_createmembershiptableSql,
		"migrations/20160608182307_CreateMembershipTable.sql",
	)
}

func migrations20160608182307_createmembershiptableSql() (*asset, error) {
	bytes, err := migrations20160608182307_createmembershiptableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160608182307_CreateMembershipTable.sql", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1466685687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20160621161411_createhookstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\xf6\x16\x1b\x8d\xad\x3e\x80\x1c\x92\xa2\xa8\xeb\x30\x85\x51\x45\x4e\x64\xe9\x90\x93\x41\x53\x1b\x8a\xb0\x4c\x12\x24\x15\x25\x9f\xd4\xdf\xe8\x97\x75\x29\x3b\xa9\x6b\xf4\x50\x5d\x84\xdd\x99\x59\xce\xee\x4c\x26\xb0\x6d\xb8\x4e\xe8\xdf\x84\x60\xfd\x65\x9a\x4a\x15\x9a\x6e\x33\x15\x66\x97\x06\x63\x1f\x1d\xa2\xe4\x3b\xf4\xe9\x81\x17\xa9\x99\x12\xa8\x3d\xd6\xd0\xe9\x1a\x1d\x84\x06\xe1\x76\x51\x42\xbb\x6f\x5f\xbe\x4e\xa3\x61\x7d\xdf\x4f\x8d\xa5\xae\xe9\x9c\xc0\xa9\x71\x32\x3d\xb0\x7c\xba\x53\x61\x72\x28\xa2\x62\x6e\xec\x8b\x53\xb2\x09\xf0\xeb\x27\x7c\x7c\xff\xe1\x02\x4a\x63\xe1\x86\xde\x87\xef\xd1\x00\x7c\xde\x70\xb1\x45\x5d\x7f\x0d\x8f\x52\x98\x68\xf0\x4b\x12\x85\xef\xa4\x31\x1e\xa1\xb2\xb1\x58\xdd\x67\xa0\x34\x78\x14\x41\x19\x0d\x67\x95\x3d\x03\xe5\x01\x9f\x51\x74\x81\x1c\xf7\x0d\x6a\x32\x4c\xad\x9d\x92\x8e\x0f\x24\x2a\xb8\xb5\xad\xc2\x3a\x99\x17\x6c\x56\x32\x28\x67\xdf\x32\x06\x8d\x31\x5b\x0f\xa3\x04\xe8\x53\x35\xcd\x74\x8a\xb7\x70\x57\x2c\x6e\x67\xc5\x03\xfc\x60\x0f\xe7\x03\x14\xcf\xb3\x26\xfc\x89\x3b\xd1\x70\x37\xfa\x74\x31\x86\x7c\x59\x42\x5e\x65\x19\x14\xec\x86\x15\x2c\x9f\xb3\xd5\xc0\xa3\x71\xb6\xdb\xd0\xd6\x24\x18\xef\xe5\x6f\xf5\x3f\x07\xec\x39\xf8\x84\x3a\xac\xc3\x8b\x45\x5a\x2e\xa0\xa4\xa3\xff\x4d\xe8\x5c\x0b\x01\x9f\xc3\x49\x5b\x38\xe4\xb4\xf5\x9a\x07\xd8\x28\x49\xd2\x53\x99\xad\x4f\xf1\x01\x1b\xc0\xf9\x32\x5f\x95\xc5\x6c\x91\x97\xc3\x25\x54\xbd\xde\x5b\x25\xa7\x55\xbe\xb8\xaf\xd8\xe8\xb0\xf9\xf9\x9f\x1d\xc6\xc9\xf8\xea\x38\x94\x6b\xd3\xeb\xd7\x58\xde\x32\x89\xcd\xff\x4a\xc5\x99\xb6\x25\x34\xe6\x9e\x5c\x17\xcb\xbb\xe3\x5c\xae\x92\xdf\x01\x00\x00\xff\xff\xe0\xb0\xeb\xc6\xbc\x02\x00\x00")

func migrations20160621161411_createhookstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20160621161411_createhookstableSql,
		"migrations/20160621161411_CreateHooksTable.sql",
	)
}

func migrations20160621161411_createhookstableSql() (*asset, error) {
	bytes, err := migrations20160621161411_createhookstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20160621161411_CreateHooksTable.sql", size: 700, mode: os.FileMode(420), modTime: time.Unix(1466538319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20160608133902_CreateGameTable.sql": migrations20160608133902_creategametableSql,
	"migrations/20160608150958_CreatePlayerTable.sql": migrations20160608150958_createplayertableSql,
	"migrations/20160608174439_CreateClanTable.sql": migrations20160608174439_createclantableSql,
	"migrations/20160608182307_CreateMembershipTable.sql": migrations20160608182307_createmembershiptableSql,
	"migrations/20160621161411_CreateHooksTable.sql": migrations20160621161411_createhookstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20160608133902_CreateGameTable.sql": &bintree{migrations20160608133902_creategametableSql, map[string]*bintree{}},
		"20160608150958_CreatePlayerTable.sql": &bintree{migrations20160608150958_createplayertableSql, map[string]*bintree{}},
		"20160608174439_CreateClanTable.sql": &bintree{migrations20160608174439_createclantableSql, map[string]*bintree{}},
		"20160608182307_CreateMembershipTable.sql": &bintree{migrations20160608182307_createmembershiptableSql, map[string]*bintree{}},
		"20160621161411_CreateHooksTable.sql": &bintree{migrations20160621161411_createhookstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

