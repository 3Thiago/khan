// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/topfreegames/khan/lib (interfaces: KhanInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lib "github.com/topfreegames/khan/lib"
	reflect "reflect"
)

// MockKhanInterface is a mock of KhanInterface interface
type MockKhanInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKhanInterfaceMockRecorder
}

// MockKhanInterfaceMockRecorder is the mock recorder for MockKhanInterface
type MockKhanInterfaceMockRecorder struct {
	mock *MockKhanInterface
}

// NewMockKhanInterface creates a new mock instance
func NewMockKhanInterface(ctrl *gomock.Controller) *MockKhanInterface {
	mock := &MockKhanInterface{ctrl: ctrl}
	mock.recorder = &MockKhanInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKhanInterface) EXPECT() *MockKhanInterfaceMockRecorder {
	return m.recorder
}

// CreateClan mocks base method
func (m *MockKhanInterface) CreateClan(arg0 context.Context, arg1 *lib.ClanPayload) (string, error) {
	ret := m.ctrl.Call(m, "CreateClan", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClan indicates an expected call of CreateClan
func (mr *MockKhanInterfaceMockRecorder) CreateClan(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClan", reflect.TypeOf((*MockKhanInterface)(nil).CreateClan), arg0, arg1)
}

// CreatePlayer mocks base method
func (m *MockKhanInterface) CreatePlayer(arg0 context.Context, arg1, arg2 string, arg3 interface{}) (string, error) {
	ret := m.ctrl.Call(m, "CreatePlayer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer
func (mr *MockKhanInterfaceMockRecorder) CreatePlayer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockKhanInterface)(nil).CreatePlayer), arg0, arg1, arg2, arg3)
}

// RetrieveClan mocks base method
func (m *MockKhanInterface) RetrieveClan(arg0 context.Context, arg1 string) (*lib.Clan, error) {
	ret := m.ctrl.Call(m, "RetrieveClan", arg0, arg1)
	ret0, _ := ret[0].(*lib.Clan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveClan indicates an expected call of RetrieveClan
func (mr *MockKhanInterfaceMockRecorder) RetrieveClan(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveClan", reflect.TypeOf((*MockKhanInterface)(nil).RetrieveClan), arg0, arg1)
}

// RetrieveClanSummary mocks base method
func (m *MockKhanInterface) RetrieveClanSummary(arg0 context.Context, arg1 string) (*lib.ClanSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveClanSummary", arg0, arg1)
	ret0, _ := ret[0].(*lib.ClanSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveClanSummary indicates an expected call of RetrieveClanSummary
func (mr *MockKhanInterfaceMockRecorder) RetrieveClanSummary(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveClanSummary", reflect.TypeOf((*MockKhanInterface)(nil).RetrieveClanSummary), arg0, arg1)
}

// RetrieveClansSummary mocks base method
func (m *MockKhanInterface) RetrieveClansSummary(arg0 context.Context, arg1 []string) ([]*lib.ClanSummary, error) {
	ret := m.ctrl.Call(m, "RetrieveClansSummary", arg0, arg1)
	ret0, _ := ret[0].([]*lib.ClanSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveClansSummary indicates an expected call of RetrieveClansSummary
func (mr *MockKhanInterfaceMockRecorder) RetrieveClansSummary(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveClansSummary", reflect.TypeOf((*MockKhanInterface)(nil).RetrieveClansSummary), arg0, arg1)
}

// RetrievePlayer mocks base method
func (m *MockKhanInterface) RetrievePlayer(arg0 context.Context, arg1 string) (*lib.Player, error) {
	ret := m.ctrl.Call(m, "RetrievePlayer", arg0, arg1)
	ret0, _ := ret[0].(*lib.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePlayer indicates an expected call of RetrievePlayer
func (mr *MockKhanInterfaceMockRecorder) RetrievePlayer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePlayer", reflect.TypeOf((*MockKhanInterface)(nil).RetrievePlayer), arg0, arg1)
}

// UpdateClan mocks base method
func (m *MockKhanInterface) UpdateClan(arg0 context.Context, arg1 *lib.ClanPayload) error {
	ret := m.ctrl.Call(m, "UpdateClan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClan indicates an expected call of UpdateClan
func (mr *MockKhanInterfaceMockRecorder) UpdateClan(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClan", reflect.TypeOf((*MockKhanInterface)(nil).UpdateClan), arg0, arg1)
}

// UpdatePlayer mocks base method
func (m *MockKhanInterface) UpdatePlayer(arg0 context.Context, arg1, arg2 string, arg3 interface{}) error {
	ret := m.ctrl.Call(m, "UpdatePlayer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayer indicates an expected call of UpdatePlayer
func (mr *MockKhanInterfaceMockRecorder) UpdatePlayer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockKhanInterface)(nil).UpdatePlayer), arg0, arg1, arg2, arg3)
}
