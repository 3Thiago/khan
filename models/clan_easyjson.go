// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package models

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson91eb9988DecodeGithubComTopfreegamesKhanModels(in *jlexer.Lexer, out *Clan) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "gameId":
			out.GameID = string(in.String())
		case "publicId":
			out.PublicID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "ownerId":
			out.OwnerID = int(in.Int())
		case "membershipCount":
			out.MembershipCount = int(in.Int())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]interface{})
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					v1 = in.Interface()
					(out.Metadata)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "allowApplication":
			out.AllowApplication = bool(in.Bool())
		case "autoJoin":
			out.AutoJoin = bool(in.Bool())
		case "createdAt":
			out.CreatedAt = int64(in.Int64())
		case "updatedAt":
			out.UpdatedAt = int64(in.Int64())
		case "deletedAt":
			out.DeletedAt = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson91eb9988EncodeGithubComTopfreegamesKhanModels(out *jwriter.Writer, in Clan) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int(int(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gameId\":")
	out.String(string(in.GameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"publicId\":")
	out.String(string(in.PublicID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ownerId\":")
	out.Int(int(in.OwnerID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"membershipCount\":")
	out.Int(int(in.MembershipCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"metadata\":")
	if in.Metadata == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in.Metadata {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			if m, ok := v2Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v2Value))
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"allowApplication\":")
	out.Bool(bool(in.AllowApplication))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"autoJoin\":")
	out.Bool(bool(in.AutoJoin))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"createdAt\":")
	out.Int64(int64(in.CreatedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"updatedAt\":")
	out.Int64(int64(in.UpdatedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"deletedAt\":")
	out.Int64(int64(in.DeletedAt))
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson91eb9988EncodeGithubComTopfreegamesKhanModels(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson91eb9988DecodeGithubComTopfreegamesKhanModels(l, v)
}
